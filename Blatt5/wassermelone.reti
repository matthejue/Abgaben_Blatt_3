## load num1 and num2
CALL INPUT IN2 # number of tests
CALL INPUT ACC
STOREIN DS ACC 0
CALL INPUT ACC
STOREIN DS ACC 1
## test num1 <= num2
SUBI SP 1;
# LOAD ACC 10; wegen des RETI-Interpreters muss ich das etwas umschreiben
LOADIN DS ACC 0
STOREIN SP ACC 1;
SUBI SP 1;
# LOAD ACC 10; # -0.5 ihr schreibt so aber zweimal die gleiche Zahl drauf
LOADIN DS ACC 1 # wegen des RETI-Interpreters muss ich das etwas umschreiben
STOREIN SP ACC 1;

LOADIN SP ACC 2;
# AND ACC 1000....0; # -0.5 Immediates sind aber nur 22 Bit breit. Euer Programm sollte in der Lage sein auch 32 Bit breite Zahlen miteinander zu vergleichen und eigentlich ist das was ihr braucht ANDI und nicht AND
LOADI IN1 -2097152
MULTI IN1 1024
AND ACC IN1
JUMP== 13
LOADIN SP ACC 1;
# AND ACC 1000...0; # Immediates sind aber nur 22 Bit breit. Euer Programm sollte in der Lage sein auch 32 Bit breite Zahlen miteinander zu vergleichen
LOADI IN1 -2097152
MULTI IN1 1024
AND ACC IN1
# JUMP> 20 # -0.5 falsche Bedingung, 100...0 ist eine negative Zahl, test TEST -10
# und -12 läuft so nicht durch !!!
JUMP!= 20

LOADI ACC 1;
# STOREIN SP ACC 2
CALL PRINT ACC
# ADDI SP 1;
SUBI IN2 1
MOVE IN2 ACC
ADDI SP 2
JUMP!= -26
JUMP 19

LOADIN SP ACC 1;
LOADI IN1 -2097152
MULTI IN1 1024
# AND ACC 1000...0; # Immediates sind aber nur 22 Bit breit. Euer Programm sollte in der Lage sein auch 32 Bit breite Zahlen miteinander zu vergleichen
AND ACC IN1
JUMP== 8;

LOADI ACC 0;
# STOREIN SP ACC 2;
CALL PRINT ACC
# ADDI SP 1;
SUBI IN2 1
MOVE IN2 ACC
ADDI SP 2
JUMP!= -38
JUMP 7

LOADIN SP ACC 2;
LOADIN SP IN1 1;
SUB ACC IN1;
JUMP<= 2;
JUMP -11;
JUMP -24;
# ihr müsst nicht alle Variablen auf dem Stack speichern, solange ihr noch
# Register übrig habt, also ACC IN1 und IN2, könnt ihr diese dafür nutzen und
# erst sobald euch die Register ausgehen alles auf den Stack speichern
# 5.5/6  der Test mit -10 -12 wird von eurem Programm nicht korrekt gehandelt,
# musste ich korrigieren, ansonnsten einwandfrei
