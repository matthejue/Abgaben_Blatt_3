index:       1
instruction: LOADI DS -2097152;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          1
PC_SIMPLE:   1
SP:          0
SP_SIMPLE:   0
BAF:         0
BAF_SIMPLE:  0
CS:          0
CS_SIMPLE:   0
DS:          2097152
DS_SIMPLE:   2097152
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0
  00003 ## load num1 and num2
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2 <- SP <- BAF <- CS
  00001 MULTI DS 1024; <- PC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       2
instruction: MULTI DS 1024;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          2
PC_SIMPLE:   2
SP:          0
SP_SIMPLE:   0
BAF:         0
BAF_SIMPLE:  0
CS:          0
CS_SIMPLE:   0
DS:          2147483648
DS_SIMPLE:   0
SRAM:
  00000 JUMP 0; <- DS
  00001 2147483648
  00002 0
  00003 ## load num1 and num2
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2 <- SP <- BAF <- CS
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- PC
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       3
instruction: MOVE DS SP;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          3
PC_SIMPLE:   3
SP:          2147483648
SP_SIMPLE:   0
BAF:         0
BAF_SIMPLE:  0
CS:          0
CS_SIMPLE:   0
DS:          2147483648
DS_SIMPLE:   0
SRAM:
  00000 JUMP 0; <- SP <- DS
  00001 2147483648
  00002 0
  00003 ## load num1 and num2
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2 <- BAF <- CS
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- PC
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       4
instruction: MOVE DS BAF;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          4
PC_SIMPLE:   4
SP:          2147483648
SP_SIMPLE:   0
BAF:         2147483648
BAF_SIMPLE:  0
CS:          0
CS_SIMPLE:   0
DS:          2147483648
DS_SIMPLE:   0
SRAM:
  00000 JUMP 0; <- SP <- BAF <- DS
  00001 2147483648
  00002 0
  00003 ## load num1 and num2
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2 <- CS
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- PC
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       5
instruction: MOVE DS CS;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          5
PC_SIMPLE:   5
SP:          2147483648
SP_SIMPLE:   0
BAF:         2147483648
BAF_SIMPLE:  0
CS:          2147483648
CS_SIMPLE:   0
DS:          2147483648
DS_SIMPLE:   0
SRAM:
  00000 JUMP 0; <- SP <- BAF <- CS <- DS
  00001 2147483648
  00002 0
  00003 ## load num1 and num2
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- PC
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       6
instruction: ADDI SP 48;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          6
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483648
BAF_SIMPLE:  0
CS:          2147483648
CS_SIMPLE:   0
DS:          2147483648
DS_SIMPLE:   0
SRAM:
  00000 JUMP 0; <- BAF <- CS <- DS
  00001 2147483648
  00002 0
  00003 ## load num1 and num2
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- PC
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       7
instruction: ADDI BAF 2;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          7
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483648
CS_SIMPLE:   0
DS:          2147483648
DS_SIMPLE:   0
SRAM:
  00000 JUMP 0; <- CS <- DS
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- PC
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       8
instruction: ADDI CS 3;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          8
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483648
DS_SIMPLE:   0
SRAM:
  00000 JUMP 0; <- DS
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- PC
  00009 MOVE CS PC;

index:       9
instruction: ADDI DS 28;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          9
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- PC

index:       10
instruction: MOVE CS PC;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          2147483651
PC_SIMPLE:   3
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- PC <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       11
instruction: ## load num1 and num2
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          2147483652
PC_SIMPLE:   4
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2; <- PC
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       12
instruction: CALL INPUT IN2;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       13
instruction: CALL INPUT ACC;
ACC:         10
ACC_SIMPLE:  10
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       14
instruction: STOREIN DS ACC 0;
ACC:         10
ACC_SIMPLE:  10
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       15
instruction: CALL INPUT ACC;
ACC:         12
ACC_SIMPLE:  12
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       16
instruction: STOREIN DS ACC 1;
ACC:         12
ACC_SIMPLE:  12
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       17
instruction: ## test num1 <= num2
ACC:         12
ACC_SIMPLE:  12
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       18
instruction: LOADIN DS ACC 0;
ACC:         10
ACC_SIMPLE:  10
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       19
instruction: JUMP> 4;
ACC:         10
ACC_SIMPLE:  10
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483663
PC_SIMPLE:   15
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1; <- PC
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       20
instruction: LOADIN DS ACC 1;
ACC:         12
ACC_SIMPLE:  12
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483664
PC_SIMPLE:   16
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5; <- PC
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       21
instruction: JUMP< 5;
ACC:         12
ACC_SIMPLE:  12
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       22
instruction: LOADIN DS ACC 0;
ACC:         10
ACC_SIMPLE:  10
IN1:         0
IN1_SIMPLE:  0
IN2:         13
IN2_SIMPLE:  13
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       23
instruction: LOADIN DS IN1 1;
ACC:         10
ACC_SIMPLE:  10
IN1:         12
IN1_SIMPLE:  12
IN2:         13
IN2_SIMPLE:  13
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       24
instruction: SUB ACC IN1;
ACC:         4294967294
ACC_SIMPLE:  1073741822
IN1:         12
IN1_SIMPLE:  12
IN2:         13
IN2_SIMPLE:  13
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       25
instruction: JUMP<= 3;
ACC:         4294967294
ACC_SIMPLE:  1073741822
IN1:         12
IN1_SIMPLE:  12
IN2:         13
IN2_SIMPLE:  13
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       26
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         12
IN1_SIMPLE:  12
IN2:         13
IN2_SIMPLE:  13
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       27
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         12
IN1_SIMPLE:  12
IN2:         13
IN2_SIMPLE:  13
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       28
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       29
instruction: MOVE IN2 ACC;
ACC:         12
ACC_SIMPLE:  12
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       30
instruction: JUMP!= -22;
ACC:         12
ACC_SIMPLE:  12
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       31
instruction: CALL INPUT ACC;
ACC:         10
ACC_SIMPLE:  10
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       32
instruction: STOREIN DS ACC 0;
ACC:         10
ACC_SIMPLE:  10
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       33
instruction: CALL INPUT ACC;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       34
instruction: STOREIN DS ACC 1;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       35
instruction: ## test num1 <= num2
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       36
instruction: LOADIN DS ACC 0;
ACC:         10
ACC_SIMPLE:  10
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       37
instruction: JUMP> 4;
ACC:         10
ACC_SIMPLE:  10
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483663
PC_SIMPLE:   15
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1; <- PC
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       38
instruction: LOADIN DS ACC 1;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483664
PC_SIMPLE:   16
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5; <- PC
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       39
instruction: JUMP< 5;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483669
PC_SIMPLE:   21
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0; <- PC
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       40
instruction: LOADI ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483670
PC_SIMPLE:   22
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2; <- PC
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       41
instruction: JUMP 2;
ACC:         0
ACC_SIMPLE:  0
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       42
instruction: CALL PRINT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         12
IN1_SIMPLE:  12
IN2:         12
IN2_SIMPLE:  12
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       43
instruction: SUBI IN2 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       44
instruction: MOVE IN2 ACC;
ACC:         11
ACC_SIMPLE:  11
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       45
instruction: JUMP!= -22;
ACC:         11
ACC_SIMPLE:  11
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       46
instruction: CALL INPUT ACC;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 10 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       47
instruction: STOREIN DS ACC 0;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       48
instruction: CALL INPUT ACC;
ACC:         12
ACC_SIMPLE:  12
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       49
instruction: STOREIN DS ACC 1;
ACC:         12
ACC_SIMPLE:  12
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       50
instruction: ## test num1 <= num2
ACC:         12
ACC_SIMPLE:  12
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       51
instruction: LOADIN DS ACC 0;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       52
instruction: JUMP> 4;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       53
instruction: LOADIN DS ACC 1;
ACC:         12
ACC_SIMPLE:  12
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       54
instruction: JUMP> 10;
ACC:         12
ACC_SIMPLE:  12
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       55
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       56
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         12
IN1_SIMPLE:  12
IN2:         11
IN2_SIMPLE:  11
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       57
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       58
instruction: MOVE IN2 ACC;
ACC:         10
ACC_SIMPLE:  10
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       59
instruction: JUMP!= -22;
ACC:         10
ACC_SIMPLE:  10
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       60
instruction: CALL INPUT ACC;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       61
instruction: STOREIN DS ACC 0;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       62
instruction: CALL INPUT ACC;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 12
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       63
instruction: STOREIN DS ACC 1;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       64
instruction: ## test num1 <= num2
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       65
instruction: LOADIN DS ACC 0;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       66
instruction: JUMP> 4;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       67
instruction: LOADIN DS ACC 1;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       68
instruction: JUMP> 10;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483662
PC_SIMPLE:   14
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3; <- PC
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       69
instruction: JUMP 3;
ACC:         4294967284
ACC_SIMPLE:  1073741812
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       70
instruction: LOADIN DS ACC 0;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         12
IN1_SIMPLE:  12
IN2:         10
IN2_SIMPLE:  10
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       71
instruction: LOADIN DS IN1 1;
ACC:         4294967286
ACC_SIMPLE:  1073741814
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         10
IN2_SIMPLE:  10
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       72
instruction: SUB ACC IN1;
ACC:         2
ACC_SIMPLE:  2
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         10
IN2_SIMPLE:  10
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- ACC
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       73
instruction: JUMP<= 3;
ACC:         2
ACC_SIMPLE:  2
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         10
IN2_SIMPLE:  10
PC:          2147483669
PC_SIMPLE:   21
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0; <- PC
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- ACC
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       74
instruction: LOADI ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         10
IN2_SIMPLE:  10
PC:          2147483670
PC_SIMPLE:   22
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2; <- PC
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       75
instruction: JUMP 2;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         10
IN2_SIMPLE:  10
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       76
instruction: CALL PRINT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         10
IN2_SIMPLE:  10
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       77
instruction: SUBI IN2 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       78
instruction: MOVE IN2 ACC;
ACC:         9
ACC_SIMPLE:  9
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- ACC <- IN2

index:       79
instruction: JUMP!= -22;
ACC:         9
ACC_SIMPLE:  9
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- ACC <- IN2

index:       80
instruction: CALL INPUT ACC;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967286 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       81
instruction: STOREIN DS ACC 0;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       82
instruction: CALL INPUT ACC;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967284
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       83
instruction: STOREIN DS ACC 1;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       84
instruction: ## test num1 <= num2
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       85
instruction: LOADIN DS ACC 0;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       86
instruction: JUMP> 4;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483663
PC_SIMPLE:   15
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1; <- PC
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       87
instruction: LOADIN DS ACC 1;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483664
PC_SIMPLE:   16
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5; <- PC
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       88
instruction: JUMP< 5;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       89
instruction: LOADIN DS ACC 0;
ACC:         11
ACC_SIMPLE:  11
IN1:         4294967284
IN1_SIMPLE:  1073741812
IN2:         9
IN2_SIMPLE:  9
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       90
instruction: LOADIN DS IN1 1;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         9
IN2_SIMPLE:  9
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       91
instruction: SUB ACC IN1;
ACC:         0
ACC_SIMPLE:  0
IN1:         11
IN1_SIMPLE:  11
IN2:         9
IN2_SIMPLE:  9
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       92
instruction: JUMP<= 3;
ACC:         0
ACC_SIMPLE:  0
IN1:         11
IN1_SIMPLE:  11
IN2:         9
IN2_SIMPLE:  9
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       93
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         11
IN1_SIMPLE:  11
IN2:         9
IN2_SIMPLE:  9
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       94
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         11
IN1_SIMPLE:  11
IN2:         9
IN2_SIMPLE:  9
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC; <- IN2

index:       95
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       96
instruction: MOVE IN2 ACC;
ACC:         8
ACC_SIMPLE:  8
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- ACC <- IN2
  00009 MOVE CS PC;

index:       97
instruction: JUMP!= -22;
ACC:         8
ACC_SIMPLE:  8
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- ACC <- IN2
  00009 MOVE CS PC;

index:       98
instruction: CALL INPUT ACC;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       99
instruction: STOREIN DS ACC 0;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       100
instruction: CALL INPUT ACC;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       101
instruction: STOREIN DS ACC 1;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       102
instruction: ## test num1 <= num2
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       103
instruction: LOADIN DS ACC 0;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       104
instruction: JUMP> 4;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483663
PC_SIMPLE:   15
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1; <- PC
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       105
instruction: LOADIN DS ACC 1;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483664
PC_SIMPLE:   16
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5; <- PC
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       106
instruction: JUMP< 5;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483669
PC_SIMPLE:   21
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0; <- PC
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       107
instruction: LOADI ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483670
PC_SIMPLE:   22
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2; <- PC
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       108
instruction: JUMP 2;
ACC:         0
ACC_SIMPLE:  0
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       109
instruction: CALL PRINT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         11
IN1_SIMPLE:  11
IN2:         8
IN2_SIMPLE:  8
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28; <- IN2
  00009 MOVE CS PC;

index:       110
instruction: SUBI IN2 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       111
instruction: MOVE IN2 ACC;
ACC:         7
ACC_SIMPLE:  7
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- ACC <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       112
instruction: JUMP!= -22;
ACC:         7
ACC_SIMPLE:  7
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- ACC <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       113
instruction: CALL INPUT ACC;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 11 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       114
instruction: STOREIN DS ACC 0;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       115
instruction: CALL INPUT ACC;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       116
instruction: STOREIN DS ACC 1;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       117
instruction: ## test num1 <= num2
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       118
instruction: LOADIN DS ACC 0;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       119
instruction: JUMP> 4;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       120
instruction: LOADIN DS ACC 1;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       121
instruction: JUMP> 10;
ACC:         11
ACC_SIMPLE:  11
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       122
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       123
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         11
IN1_SIMPLE:  11
IN2:         7
IN2_SIMPLE:  7
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3; <- IN2
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       124
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       125
instruction: MOVE IN2 ACC;
ACC:         6
ACC_SIMPLE:  6
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- ACC <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       126
instruction: JUMP!= -22;
ACC:         6
ACC_SIMPLE:  6
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- ACC <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       127
instruction: CALL INPUT ACC;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       128
instruction: STOREIN DS ACC 0;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       129
instruction: CALL INPUT ACC;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 11
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       130
instruction: STOREIN DS ACC 1;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       131
instruction: ## test num1 <= num2
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       132
instruction: LOADIN DS ACC 0;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       133
instruction: JUMP> 4;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       134
instruction: LOADIN DS ACC 1;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       135
instruction: JUMP> 10;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483662
PC_SIMPLE:   14
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3; <- PC
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       136
instruction: JUMP 3;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       137
instruction: LOADIN DS ACC 0;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         11
IN1_SIMPLE:  11
IN2:         6
IN2_SIMPLE:  6
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       138
instruction: LOADIN DS IN1 1;
ACC:         4294967285
ACC_SIMPLE:  1073741813
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         6
IN2_SIMPLE:  6
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       139
instruction: SUB ACC IN1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         6
IN2_SIMPLE:  6
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       140
instruction: JUMP<= 3;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         6
IN2_SIMPLE:  6
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       141
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         6
IN2_SIMPLE:  6
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       142
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         6
IN2_SIMPLE:  6
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2; <- IN2
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       143
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       144
instruction: MOVE IN2 ACC;
ACC:         5
ACC_SIMPLE:  5
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- ACC <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       145
instruction: JUMP!= -22;
ACC:         5
ACC_SIMPLE:  5
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- ACC <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       146
instruction: CALL INPUT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967285 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       147
instruction: STOREIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       148
instruction: CALL INPUT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967285
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       149
instruction: STOREIN DS ACC 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       150
instruction: ## test num1 <= num2
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       151
instruction: LOADIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       152
instruction: JUMP> 4;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       153
instruction: LOADIN DS ACC 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       154
instruction: JUMP> 10;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483662
PC_SIMPLE:   14
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3; <- PC
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       155
instruction: JUMP 3;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       156
instruction: LOADIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967285
IN1_SIMPLE:  1073741813
IN2:         5
IN2_SIMPLE:  5
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       157
instruction: LOADIN DS IN1 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         5
IN2_SIMPLE:  5
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       158
instruction: SUB ACC IN1;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         5
IN2_SIMPLE:  5
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       159
instruction: JUMP<= 3;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         5
IN2_SIMPLE:  5
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       160
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         5
IN2_SIMPLE:  5
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       161
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         5
IN2_SIMPLE:  5
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48; <- IN2
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       162
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       163
instruction: MOVE IN2 ACC;
ACC:         4
ACC_SIMPLE:  4
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- ACC <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       164
instruction: JUMP!= -22;
ACC:         4
ACC_SIMPLE:  4
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- ACC <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       165
instruction: CALL INPUT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       166
instruction: STOREIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       167
instruction: CALL INPUT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       168
instruction: STOREIN DS ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       169
instruction: ## test num1 <= num2
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       170
instruction: LOADIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       171
instruction: JUMP> 4;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       172
instruction: LOADIN DS ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       173
instruction: JUMP> 10;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       174
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       175
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         4
IN2_SIMPLE:  4
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS; <- IN2
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       176
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       177
instruction: MOVE IN2 ACC;
ACC:         3
ACC_SIMPLE:  3
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- ACC <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       178
instruction: JUMP!= -22;
ACC:         3
ACC_SIMPLE:  3
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- ACC <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       179
instruction: CALL INPUT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       180
instruction: STOREIN DS ACC 0;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       181
instruction: CALL INPUT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 1
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       182
instruction: STOREIN DS ACC 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       183
instruction: ## test num1 <= num2
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       184
instruction: LOADIN DS ACC 0;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       185
instruction: JUMP> 4;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483663
PC_SIMPLE:   15
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1; <- PC
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       186
instruction: LOADIN DS ACC 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483664
PC_SIMPLE:   16
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5; <- PC
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       187
instruction: JUMP< 5;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       188
instruction: LOADIN DS ACC 0;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       189
instruction: LOADIN DS IN1 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       190
instruction: SUB ACC IN1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       191
instruction: JUMP<= 3;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483669
PC_SIMPLE:   21
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0; <- PC
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       192
instruction: LOADI ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483670
PC_SIMPLE:   22
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2; <- PC
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       193
instruction: JUMP 2;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       194
instruction: CALL PRINT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         3
IN2_SIMPLE:  3
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF; <- IN2
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       195
instruction: SUBI IN2 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       196
instruction: MOVE IN2 ACC;
ACC:         2
ACC_SIMPLE:  2
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- ACC <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       197
instruction: JUMP!= -22;
ACC:         2
ACC_SIMPLE:  2
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- ACC <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       198
instruction: CALL INPUT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 1 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       199
instruction: STOREIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       200
instruction: CALL INPUT ACC;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       201
instruction: STOREIN DS ACC 1;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       202
instruction: ## test num1 <= num2
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       203
instruction: LOADIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       204
instruction: JUMP> 4;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       205
instruction: LOADIN DS ACC 1;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       206
instruction: JUMP> 10;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483662
PC_SIMPLE:   14
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3; <- PC
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       207
instruction: JUMP 3;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       208
instruction: LOADIN DS ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         2
IN2_SIMPLE:  2
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       209
instruction: LOADIN DS IN1 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         2
IN2_SIMPLE:  2
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       210
instruction: SUB ACC IN1;
ACC:         1
ACC_SIMPLE:  1
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         2
IN2_SIMPLE:  2
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       211
instruction: JUMP<= 3;
ACC:         1
ACC_SIMPLE:  1
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         2
IN2_SIMPLE:  2
PC:          2147483669
PC_SIMPLE:   21
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0; <- PC
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       212
instruction: LOADI ACC 0;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         2
IN2_SIMPLE:  2
PC:          2147483670
PC_SIMPLE:   22
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2; <- PC
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       213
instruction: JUMP 2;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         2
IN2_SIMPLE:  2
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       214
instruction: CALL PRINT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         2
IN2_SIMPLE:  2
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024;
  00002 MOVE DS SP; <- IN2
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       215
instruction: SUBI IN2 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       216
instruction: MOVE IN2 ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       217
instruction: JUMP!= -22;
ACC:         1
ACC_SIMPLE:  1
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483653
PC_SIMPLE:   5
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC; <- PC
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- ACC <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       218
instruction: CALL INPUT ACC;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483654
PC_SIMPLE:   6
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0; <- PC
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 0 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       219
instruction: STOREIN DS ACC 0;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483655
PC_SIMPLE:   7
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC; <- PC
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       220
instruction: CALL INPUT ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483656
PC_SIMPLE:   8
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1; <- PC
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 4294967295
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       221
instruction: STOREIN DS ACC 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483657
PC_SIMPLE:   9
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2 <- PC
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       222
instruction: ## test num1 <= num2
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483658
PC_SIMPLE:   10
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0; <- PC
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       223
instruction: LOADIN DS ACC 0;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483659
PC_SIMPLE:   11
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4; <- PC
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       224
instruction: JUMP> 4;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483660
PC_SIMPLE:   12
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1; <- PC
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       225
instruction: LOADIN DS ACC 1;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483661
PC_SIMPLE:   13
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10; <- PC
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       226
instruction: JUMP> 10;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483662
PC_SIMPLE:   14
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3; <- PC
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       227
instruction: JUMP 3;
ACC:         0
ACC_SIMPLE:  0
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483665
PC_SIMPLE:   17
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0; <- PC
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       228
instruction: LOADIN DS ACC 0;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         4294967295
IN1_SIMPLE:  1073741823
IN2:         1
IN2_SIMPLE:  1
PC:          2147483666
PC_SIMPLE:   18
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1; <- PC
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152;
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       229
instruction: LOADIN DS IN1 1;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         1
IN2_SIMPLE:  1
PC:          2147483667
PC_SIMPLE:   19
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1; <- PC
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       230
instruction: SUB ACC IN1;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         1
IN2_SIMPLE:  1
PC:          2147483668
PC_SIMPLE:   20
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3; <- PC
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       231
instruction: JUMP<= 3;
ACC:         4294967295
ACC_SIMPLE:  1073741823
IN1:         0
IN1_SIMPLE:  0
IN2:         1
IN2_SIMPLE:  1
PC:          2147483671
PC_SIMPLE:   23
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1; <- PC
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       232
instruction: LOADI ACC 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         1
IN2_SIMPLE:  1
PC:          2147483672
PC_SIMPLE:   24
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC; <- PC
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       233
instruction: CALL PRINT ACC;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         1
IN2_SIMPLE:  1
PC:          2147483673
PC_SIMPLE:   25
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1; <- PC
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1
  00001 MULTI DS 1024; <- ACC <- IN2
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       234
instruction: SUBI IN2 1;
ACC:         1
ACC_SIMPLE:  1
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          2147483674
PC_SIMPLE:   26
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC; <- PC
  00027 JUMP!= -22;
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- IN1 <- IN2
  00001 MULTI DS 1024; <- ACC
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       235
instruction: MOVE IN2 ACC;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          2147483675
PC_SIMPLE:   27
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22; <- PC
  00028 4294967295 <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;

index:       236
instruction: JUMP!= -22;
ACC:         0
ACC_SIMPLE:  0
IN1:         0
IN1_SIMPLE:  0
IN2:         0
IN2_SIMPLE:  0
PC:          2147483676
PC_SIMPLE:   28
SP:          2147483696
SP_SIMPLE:   48
BAF:         2147483650
BAF_SIMPLE:  2
CS:          2147483651
CS_SIMPLE:   3
DS:          2147483676
DS_SIMPLE:   28
SRAM:
  00000 JUMP 0;
  00001 2147483648
  00002 0 <- BAF
  00003 ## load num1 and num2 <- CS
  00004 CALL INPUT IN2;
  00005 CALL INPUT ACC;
  00006 STOREIN DS ACC 0;
  00007 CALL INPUT ACC;
  00008 STOREIN DS ACC 1;
  00009 ## test num1 <= num2
  00010 LOADIN DS ACC 0;
  00011 JUMP> 4;
  00012 LOADIN DS ACC 1;
  00013 JUMP> 10;
  00014 JUMP 3;
  00015 LOADIN DS ACC 1;
  00016 JUMP< 5;
  00017 LOADIN DS ACC 0;
  00018 LOADIN DS IN1 1;
  00019 SUB ACC IN1;
  00020 JUMP<= 3;
  00021 LOADI ACC 0;
  00022 JUMP 2;
  00023 LOADI ACC 1;
  00024 CALL PRINT ACC;
  00025 SUBI IN2 1;
  00026 MOVE IN2 ACC;
  00027 JUMP!= -22;
  00028 4294967295 <- PC <- DS
  00029 0
  00030 0
  00031 0
  00032 0
  00033 0
  00034 0
  00035 0
  00036 0
  00037 0
  00038 0
  00039 0
  00040 0
  00041 0
  00042 0
  00043 0
  00044 0
  00045 0
  00046 0
  00047 0
  00048 0 <- SP
UART:
  00000 0
  00001 0
  00002 0
EPROM:
  00000 LOADI DS -2097152; <- ACC <- IN1 <- IN2
  00001 MULTI DS 1024;
  00002 MOVE DS SP;
  00003 MOVE DS BAF;
  00004 MOVE DS CS;
  00005 ADDI SP 48;
  00006 ADDI BAF 2;
  00007 ADDI CS 3;
  00008 ADDI DS 28;
  00009 MOVE CS PC;