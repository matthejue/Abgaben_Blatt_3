# // Block(Name('global.1'), [])
# // Exp(GoTo(Name('main.0')))
# // not included Exp(GoTo(Name('main.0')))
# // Block(Name('main.0'), [])
# // Assign(Alloc(Writeable(), ArrayDecl([Num('4'), Num('2'), Num('3')], IntType()), Name('ar')), Array([Array([Array([Num('1'), Num('1'), Num('3')]), Array([Num('1'), Num('2'), Num('6')])]), Array([Array([Num('2'), Num('1'), Num('9')]), Array([Num('2'), Num('2'), Num('12')])]), Array([Array([Num('3'), Num('1'), Num('15')]), Array([Num('3'), Num('2'), Num('18')])]), Array([Array([Num('4'), Num('1'), Num('21')]), Array([Num('4'), Num('2'), Num('24')])])]))
# // Assign(Name('ar'), Array([Array([Array([Num('1'), Num('1'), Num('3')]), Array([Num('1'), Num('2'), Num('6')])]), Array([Array([Num('2'), Num('1'), Num('9')]), Array([Num('2'), Num('2'), Num('12')])]), Array([Array([Num('3'), Num('1'), Num('15')]), Array([Num('3'), Num('2'), Num('18')])]), Array([Array([Num('4'), Num('1'), Num('21')]), Array([Num('4'), Num('2'), Num('24')])])]))
# Exp(Num('1'))
SUBI SP 1;
LOADI ACC 1;
STOREIN SP ACC 1;
# Exp(Num('1'))
SUBI SP 1;
LOADI ACC 1;
STOREIN SP ACC 1;
# Exp(Num('3'))
SUBI SP 1;
LOADI ACC 3;
STOREIN SP ACC 1;
# Exp(Num('1'))
SUBI SP 1;
LOADI ACC 1;
STOREIN SP ACC 1;
# Exp(Num('2'))
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
# Exp(Num('6'))
SUBI SP 1;
LOADI ACC 6;
STOREIN SP ACC 1;
# Exp(Num('2'))
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
# Exp(Num('1'))
SUBI SP 1;
LOADI ACC 1;
STOREIN SP ACC 1;
# Exp(Num('9'))
SUBI SP 1;
LOADI ACC 9;
STOREIN SP ACC 1;
# Exp(Num('2'))
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
# Exp(Num('2'))
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
# Exp(Num('12'))
SUBI SP 1;
LOADI ACC 12;
STOREIN SP ACC 1;
# Exp(Num('3'))
SUBI SP 1;
LOADI ACC 3;
STOREIN SP ACC 1;
# Exp(Num('1'))
SUBI SP 1;
LOADI ACC 1;
STOREIN SP ACC 1;
# Exp(Num('15'))
SUBI SP 1;
LOADI ACC 15;
STOREIN SP ACC 1;
# Exp(Num('3'))
SUBI SP 1;
LOADI ACC 3;
STOREIN SP ACC 1;
# Exp(Num('2'))
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
# Exp(Num('18'))
SUBI SP 1;
LOADI ACC 18;
STOREIN SP ACC 1;
# Exp(Num('4'))
SUBI SP 1;
LOADI ACC 4;
STOREIN SP ACC 1;
# Exp(Num('1'))
SUBI SP 1;
LOADI ACC 1;
STOREIN SP ACC 1;
# Exp(Num('21'))
SUBI SP 1;
LOADI ACC 21;
STOREIN SP ACC 1;
# Exp(Num('4'))
SUBI SP 1;
LOADI ACC 4;
STOREIN SP ACC 1;
# Exp(Num('2'))
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
# Exp(Num('24'))
SUBI SP 1;
LOADI ACC 24;
STOREIN SP ACC 1;
# Assign(Global(Num('0')), Stack(Num('24')))
LOADIN SP ACC 1;
STOREIN DS ACC 23;
LOADIN SP ACC 2;
STOREIN DS ACC 22;
LOADIN SP ACC 3;
STOREIN DS ACC 21;
LOADIN SP ACC 4;
STOREIN DS ACC 20;
LOADIN SP ACC 5;
STOREIN DS ACC 19;
LOADIN SP ACC 6;
STOREIN DS ACC 18;
LOADIN SP ACC 7;
STOREIN DS ACC 17;
LOADIN SP ACC 8;
STOREIN DS ACC 16;
LOADIN SP ACC 9;
STOREIN DS ACC 15;
LOADIN SP ACC 10;
STOREIN DS ACC 14;
LOADIN SP ACC 11;
STOREIN DS ACC 13;
LOADIN SP ACC 12;
STOREIN DS ACC 12;
LOADIN SP ACC 13;
STOREIN DS ACC 11;
LOADIN SP ACC 14;
STOREIN DS ACC 10;
LOADIN SP ACC 15;
STOREIN DS ACC 9;
LOADIN SP ACC 16;
STOREIN DS ACC 8;
LOADIN SP ACC 17;
STOREIN DS ACC 7;
LOADIN SP ACC 18;
STOREIN DS ACC 6;
LOADIN SP ACC 19;
STOREIN DS ACC 5;
LOADIN SP ACC 20;
STOREIN DS ACC 4;
LOADIN SP ACC 21;
STOREIN DS ACC 3;
LOADIN SP ACC 22;
STOREIN DS ACC 2;
LOADIN SP ACC 23;
STOREIN DS ACC 1;
LOADIN SP ACC 24;
STOREIN DS ACC 0;
ADDI SP 24;
## code^aa (e_1)
SUBI SP 1;
LOADI ACC 3;
STOREIN SP ACC 1;
## code^aa (e_2)
SUBI SP 1;
LOADI ACC 1;
STOREIN SP ACC 1;
## code^aa (e_3)
SUBI SP 1;
LOADI ACC 2;
STOREIN SP ACC 1;
## start
# diesen Befehl LOAD ACC SP 3 gibt es nicht, ihr meint wohl LOADIN und SP und
# ACC genau falsch rum -0.5
ADD IN1 DS
LOADIN SP ACC 3
MULTI ACC 6
# MOVE IN1 ACC wozu?
ADD IN1 ACC # -0.5 einfach nach jedem Schritt IN1 aufaddieren
LOADIN SP ACC 2
MULTI ACC 3
ADD IN1 ACC
LOADIN SP ACC 1
MULTI ACC 1
# ADDI IN1 ACC das sollte ADD ohne I sein, sonst gibt es den Befehl nicht
ADD IN1 ACC
# ADDI IN1 a # -0.5 das funktioniert nicht, weil Immediates nur 22-Bit sind,
ADDI SP 3
# die ABI nicht vergessen und Platz auf dem Stack schaffen -0.5
# -0.5 es musste viel korrigiert werden damit es durchläuft
## end
# 4/6 Grundidee stimmt, aber es musste viel korrigiert werden damit es durchläuft
